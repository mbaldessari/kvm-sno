---
- name: Install MCG using an ACM and MCE from IIBs
  hosts: localhost
  connection: local
  gather_facts: false
  become: true
  become_user: michele
  vars:
    mcgtempfolder: "~/sno-mcg"
    gitrepo: https://github.com/validatedpatterns/multicloud-gitops
    gitbranch: main
    hub: sno1
    spoke: sno2
  tasks:
    - name: Fail if iib_acm is not defined
      ansible.builtin.fail:
        msg: "IIB is not defined"
      when: iib_acm is not defined or iib_acm == ""

    - name: Fail if iib_mce is not defined
      ansible.builtin.fail:
        msg: "IIB is not defined"
      when: iib_mce is not defined or iib_mce == ""

    - name: Check that all kubeconfig files exist
      ansible.builtin.stat:
        path: "~/{{ item }}-kubeconfig"
      with_items:
        - "{{ hub }}"
        - "{{ spoke }}"
      register: kubeconfig_files

    - name: Verifying if files exists
      ansible.builtin.debug:
        msg: "File {{ item.stat.path }} exist"
      loop: "{{ kubeconfig_files.results }}"
      loop_control:
        label: "{{ item.stat.path }}"
      failed_when: not item.stat.exists

    - name: Enable SNO internal registry
      ansible.builtin.shell: |
        set -e
        export KUBECONFIG=~/{{ item }}-kubeconfig
        oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"managementState":"Managed"}}'
        oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"emptyDir":{}}}}'
      with_items:
        - "{{ hub }}"
        - "{{ spoke }}"

    - name: Delete temporary folder
      ansible.builtin.file:
        path: "{{ mcgtempfolder }}"
        state: absent

    - name: Create temporary folder
      ansible.builtin.file:
        path: "{{ mcgtempfolder }}/multicloud-gitops"
        state: directory
        recurse: true

    - name: Clone git repo
      ansible.builtin.git:
        repo: "{{ gitrepo }}"
        version: "{{ gitbranch }}"
        dest: "{{ mcgtempfolder }}/multicloud-gitops"
        clone: true

    - name: Load IIBs "{{ iib_acm }} - {{ iib_mce }} on {{ item }}"
      ansible.builtin.shell: |
        set -e
        export KUBECONFIG=~/{{ item }}-kubeconfig
        make load-iib &> /tmp/iib-acm-ansible-{{ hub }}.log
      environment:
        KUBEADMINPASS: "{{ kubeadmin_pass }}"
        OPERATOR: advanced-cluster-management,multicluster-engine
        INDEX_IMAGES: "{{ iib_index_image_base }}/iib:{{ iib_acm }},{{ iib_index_image_base }}/iib:{{ iib_mce }}"
        # HTTP_PROXY: "{{ http_proxy }}"
        # HTTPS_PROXY: "{{ https_proxy }}"
        # NO_PROXY: "{{ no_proxy }}"
      args:
        chdir: "{{ mcgtempfolder }}/multicloud-gitops"
      with_items:
        - "{{ hub }}"

    - name: Install pattern on HUB/{{ hub }}
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG=~/{{ hub }}-kubeconfig
        export ACM_CHANNEL=$(oc get -n openshift-marketplace packagemanifests -l "catalog=iib-{{ iib_acm }}" --field-selector "metadata.name=advanced-cluster-management" -o jsonpath='{.items[0].status.defaultChannel}')
        export MCE_CHANNEL=$(oc get -n openshift-margetplace packagemanifests -l "catalog=iib-{{ iib_mce }}" --field-selector "metadata.name=multicluster-engine" -o jsonpath='{.items[0].status.defaultChannel}')

        make EXTRA_HELM_OPTS="--set main.extraParameters[0].name=clusterGroup.subscriptions.acm.source --set main.extraParameters[0].value=iib-{{ iib_acm }} \
                              --set main.extraParameters[1].name=clusterGroup.subscriptions.acm.channel --set main.extraParameters[1].value=${ACM_CHANNEL} \
                              --set main.extraParameters[2].name=acm.mce_operator.source --set main.extraParameters[2].value="iib-{{ iib_mce }}" \
                              --set main.extraParameters[3].name=acm.mce_operator.channel --set main.extraParameters[3].value=${MCE_CHANNEL}" install &> /tmp/acm-iib-install.log
      args:
        chdir: "{{ mcgtempfolder }}/multicloud-gitops"

    - name: Load IIBs "{{ iib_acm }} - {{ iib_mce }} on {{ item }}"
      ansible.builtin.shell: |
        set -e
        export KUBECONFIG=~/{{ item }}-kubeconfig
        make load-iib &> /tmp/iib-acm-ansible-{{ spoke }}.log
      environment:
        KUBEADMINPASS: "{{ kubeadmin_pass }}"
        OPERATOR: advanced-cluster-management,multicluster-engine
        INDEX_IMAGES: "{{ iib_index_image_base }}/iib:{{ iib_acm }},{{ iib_index_image_base }}/iib:{{ iib_mce }}"
        # HTTP_PROXY: "{{ http_proxy }}"
        # HTTPS_PROXY: "{{ https_proxy }}"
        # NO_PROXY: "{{ no_proxy }}"
      args:
        chdir: "{{ mcgtempfolder }}/multicloud-gitops"
      with_items:
        - "{{ spoke }}"

    - name: Wait for all argo apps to be green
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG=~/{{ hub }}-kubeconfig
        make argo-healthcheck
      args:
        chdir: "{{ mcgtempfolder }}/multicloud-gitops"
      retries: 100
      delay: 20
      register: argo
      until: argo is not failed

    - name: Wait for ManagedCluster API to show up
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG=~/{{ hub }}-kubeconfig
        oc api-resources | grep cluster.open-cluster-management.io/v1 | grep ManagedCluster
      retries: 50
      delay: 20
      register: managedcluster_api
      until: managedcluster_api is not failed

    - name: Add {{ spoke }}
      ansible.builtin.set_fact:
        HUBCONFIG: "{{ '~/{{ hub }}-kubeconfig' | expanduser }}"
        REGIONCONFIG: "{{ '~/{{ spoke }}-kubeconfig' | expanduser }}"

    - name: Import {{ spoke }}
      ansible.builtin.import_role:
        name: acm_import
      retries: 10
      delay: 30
      register: acm1
      until: acm1 is not failed

    - name: Wait for multicloud-gitops-group-one project to show up on spoke
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG=~/{{ spoke }}-kubeconfig
        oc get projects multicloud-gitops-group-one
      args:
        chdir: "{{ mcgtempfolder }}/multicloud-gitops"
      retries: 100
      delay: 20
      register: argo
      until: argo is not failed

    - name: Wait for all argo apps to be green on spoke
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG=~/{{ spoke }}-kubeconfig
        make argo-healthcheck
      args:
        chdir: "{{ mcgtempfolder }}/multicloud-gitops"
      retries: 100
      delay: 20
      register: argo
      until: argo is not failed
