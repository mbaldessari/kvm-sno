---
- name: Install SNO clusters
  hosts: kvm
  gather_facts: false
  become: true
  tasks:
    - name: Template install-config.yaml to the base tmp folder for debugging
      ansible.builtin.template:
        src: ../templates/install-config.yaml.j2
        dest: "{{ tempfolder }}/install-config.yaml"
        mode: "0640"
      with_items:
        - sno1

    - name: Template install-config.yaml
      ansible.builtin.template:
        src: ../templates/install-config.yaml.j2
        dest: "{{ tempfolder }}/{{ item }}/install-config.yaml"
        mode: "0640"
      with_items: "{{ snos }}"

    - name: Create ocp manifests
      ansible.builtin.shell: |
        set -e
        ./openshift-install --dir={{ item }} create manifests
      args:
        chdir: "{{ tempfolder }}"
      with_items: "{{ snos }}"

    # Not working yet?!
    - name: Template machineconfig for kernel args
      ansible.builtin.template:
        src: ../templates/machineconfig-kargs.yaml
        dest: "{{ tempfolder }}/{{ item }}/openshift/99-openshift-machineconfig-kargs.yaml"
        mode: "0644"
      with_items: "{{ snos }}"

    - name: Create ocp folder and run openshift-install
      ansible.builtin.shell: |
        set -e
        ./openshift-install --dir={{ item }} create single-node-ignition-config
      args:
        chdir: "{{ tempfolder }}"
      with_items: "{{ snos }}"

    # - name: Inject kernel args
    #   ansible.builtin.shell: |
    #     set -e -o pipefail
    #     jq '. += {"kernelArguments": { "shouldExist": ["mitigations=off", "selinux=0"] }}' \
    #         "{{ tempfolder }}/{{ item }}/bootstrap-in-place-for-live-iso.ign" | \
    #         jq '.ignition.version="3.3.0"' > "{{ tempfolder }}/tmp-{{ item }}.ign" 
    #     cp -f "{{ tempfolder }}/tmp-{{ item }}.ign" "{{ tempfolder }}/{{ item }}/bootstrap-in-place-for-live-iso.ign"
    #   with_items: "{{ snos }}"

    - name: Run coreos ignition embedding
      ansible.builtin.shell: |
        set -e
        cp rhcos-live.iso "{{ item }}/rhcos-live.iso"
        podman run --privileged --pull always --rm \
            -v /dev:/dev -v /run/udev:/run/udev -v "{{ tempfolder }}:/data" \
            -w /data quay.io/coreos/coreos-installer:release \
            iso ignition embed -fi {{ item }}/bootstrap-in-place-for-live-iso.ign "{{ item }}/rhcos-live.iso"
      args:
        chdir: "{{ tempfolder }}"
      with_items: "{{ snos }}"

    - name: Create SNO VM
      ansible.builtin.command: >-
        virt-install
        --name {{ item }}
        --hvm
        --virt-type kvm
        --cdrom {{ tempfolder }}/{{ item }}/rhcos-live.iso
        --arch {{ arch }}
        --os-variant rhel8.0
        --network bridge="{{ bridge_interface }}",mac="{{ mac_prefix }}:{{ clusters[item].mac_nr }}"
        --vcpus {{ clusters[item].cpus }}
        --ram {{ clusters[item].ram }}
        --disk pool={{ vm_pool }},size={{ clusters[item].disk }},format=qcow2,bus=scsi,cache={{ clusters[item].cache }},wwn={{ clusters[item].wwn }}
        --disk pool={{ vm_pool }},size={{ clusters[item].disk2 }},format=qcow2,bus=scsi,cache={{ clusters[item].cache2 }},wwn={{ clusters[item].wwn2 }}
        --check disk_size=off
        --graphics spice,listen=127.0.0.1
        --noautoconsole
        --boot menu=on,useserial=on,uefi
      with_items: "{{ snos }}"
      retries: 10
      delay: 10
      register: vm_creation
      until: vm_creation is not failed

    - name: Wait for vm to be stopped
      ansible.builtin.shell: |
        set -e -o pipefail
        virsh list --all | grep -w "{{ item }}" | grep -v running
      register: running
      retries: 100
      delay: 10
      until: running is not failed
      with_items: "{{ snos }}"

    - name: Start "{{ item }}"
      ansible.builtin.command: |
        virsh start "{{ item }}"
      with_items: "{{ snos }}"

    - name: Wait for node to be Ready
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ tempfolder }}/{{ item }}/auth/kubeconfig"
        "{{ tempfolder }}"/oc get nodes | grep "{{ item }}" | grep -v NotReady
      with_items: "{{ snos }}"
      register: cluster_info
      until: cluster_info is not failed
      retries: 100
      delay: 20

    - name: Template out lvm bits
      tags:
        - lvm
      ansible.builtin.template:
        src: ../templates/lvm-base.yaml
        dest: "{{ tempfolder }}/{{ item }}/lvm-base.yaml"
        mode: "0644"
      with_items: "{{ snos }}"

    - name: Template out lvm cluster
      tags:
        - lvm
      ansible.builtin.template:
        src: ../templates/lvm-cluster.yaml
        dest: "{{ tempfolder }}/{{ item }}"
        mode: "0644"
      with_items: "{{ snos }}"

    - name: Fetch kubeconfig file
      ansible.posix.synchronize:
        mode: pull
        src: "{{ tempfolder }}/{{ item }}/auth/kubeconfig"
        dest: "~/{{ item }}-kubeconfig"
      with_items: "{{ snos }}"

    - name: Fix permissions
      ansible.builtin.shell: |
        chmod 0640 "/home/michele/{{ item }}-kubeconfig"
      with_items: "{{ snos }}"
      delegate_to: localhost

    - name: Wait for console to be up
      ansible.builtin.uri:
        url: https://console-openshift-console.apps.{{ item }}.{{ domain }}/
        validate_certs: false
        follow_redirects: all
      with_items: "{{ snos }}"
      register: uri
      until: uri is not failed
      retries: 100
      delay: 20

    - name: Set kubeadmin password
      ansible.builtin.shell: |
        set -e -o pipefail
        PASS=$(python3 -c 'import bcrypt; print(bcrypt.hashpw(b"{{ kubeadmin_pass }}", bcrypt.gensalt(rounds=10)).decode())' | base64 -w0)
        export KUBECONFIG="{{ tempfolder }}/{{ item }}/auth/kubeconfig"
        "{{ tempfolder }}"/oc patch secret -n kube-system kubeadmin --type json \
          -p '[{"op": "replace", "path": "/data/kubeadmin", "value": "'$PASS'"}]'
      with_items: "{{ snos }}"
      when: kubeadmin_pass is defined
      register: kubepass
      until: kubepass is not failed
      retries: 10
      delay: 2

    - name: Install LVM operator
      tags:
        - lvm
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ tempfolder }}/{{ item }}/auth/kubeconfig"
        "{{ tempfolder }}"/oc apply -f "{{ tempfolder }}/{{ item }}/lvm-base.yaml"
      with_items: "{{ snos }}"
      register: lvm
      until: lvm is not failed
      retries: 10
      delay: 2

    - name: Install LVM Cluster
      tags:
        - lvm
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ tempfolder }}/{{ item }}/auth/kubeconfig"
        "{{ tempfolder }}"/oc apply -f "{{ tempfolder }}/{{ item }}/lvm-cluster.yaml"
      register: lvmcluster
      retries: 50
      delay: 20
      until: lvmcluster is not failed
      with_items: "{{ snos }}"
