---
- name: PVC Snapshot Test
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    namespace: perf-pvc
    storage_class: ibm-spectrum-scale-fs1
    snapshot_class: ibm-spectrum-scale-snapshot-class
    original_pvc_name: test-pvc
    snapshot_name: test-snapshot
    cloned_pvc_name: cloned-pvc
    volume_size: 10Gi

  tasks:
    - name: Delete snapshot PVC
      kubernetes.core.k8s:
        kubeconfig: "{{ fullclusterfolder }}/auth/kubeconfig"
        state: absent
        kind: PersistentVolumeClaim
        name: "{{ cloned_pvc_name }}"
        namespace: "{{ namespace }}"

    - name: Delete PVC
      kubernetes.core.k8s:
        kubeconfig: "{{ fullclusterfolder }}/auth/kubeconfig"
        state: absent
        kind: PersistentVolumeClaim
        name: "{{ original_pvc_name }}"
        namespace: "{{ namespace }}"

    - name: Delete NS
      kubernetes.core.k8s:
        kubeconfig: "{{ fullclusterfolder }}/auth/kubeconfig"
        state: absent
        kind: Namespace
        name: "{{ namespace }}"

  
    - name: Wait for the namespace to be fully deleted
      kubernetes.core.k8s_info:
        kubeconfig: "{{ fullclusterfolder }}/auth/kubeconfig"
        kind: Namespace
        name: "{{ namespace }}"
      register: ns_status
      until: ns_status.resources | length == 0
      retries: 30
      delay: 5
      
    - name: Create NS
      kubernetes.core.k8s:
        kubeconfig: "{{ fullclusterfolder }}/auth/kubeconfig"
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ namespace }}"
          spec:

    - name: Create initial PVC
      kubernetes.core.k8s:
        kubeconfig: "{{ fullclusterfolder }}/auth/kubeconfig"
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: "{{ original_pvc_name }}"
            namespace: "{{ namespace }}"
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: "{{ volume_size }}"
            storageClassName: "{{ storage_class }}"

    - name: Create a pod to write 10G zero data to the PVC (fast)
      kubernetes.core.k8s:
        kubeconfig: "{{ fullclusterfolder }}/auth/kubeconfig"
        state: present
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            name: fill-zero-data
            namespace: "{{ namespace }}"
          spec:
            containers:
              - name: writer
                image: registry.redhat.io/ubi9/ubi:latest
                command: ["/bin/sh", "-c"]
                args:
                  - dd if=/dev/zero of=/data/testfile bs=1M count=10240; sync
                volumeMounts:
                  - name: data-vol
                    mountPath: /data
            restartPolicy: Never
            volumes:
              - name: data-vol
                persistentVolumeClaim:
                  claimName: "{{ original_pvc_name }}"

    - name: Wait for the pod to complete writing data
      kubernetes.core.k8s_info:
        kubeconfig: "{{ fullclusterfolder }}/auth/kubeconfig"
        kind: Pod
        namespace: "{{ namespace }}"
        name: fill-zero-data
      register: pod_status
      until: pod_status.resources | length > 0 and pod_status.resources[0].status.phase in ['Succeeded']
      retries: 20
      delay: 15

    - name: Delete the pod after data fill
      kubernetes.core.k8s:
        kubeconfig: "{{ fullclusterfolder }}/auth/kubeconfig"
        state: absent
        kind: Pod
        namespace: "{{ namespace }}"
        name: fill-zero-data

    - name: Create snapshot of the PVC
      kubernetes.core.k8s:
        state: present
        kubeconfig: "{{ fullclusterfolder }}/auth/kubeconfig"
        definition:
          apiVersion: snapshot.storage.k8s.io/v1
          kind: VolumeSnapshot
          metadata:
            name: "{{ snapshot_name }}"
            namespace: "{{ namespace }}"
          spec:
            volumeSnapshotClassName: "{{ snapshot_class }}"
            source:
              persistentVolumeClaimName: "{{ original_pvc_name }}"

    - name: Wait for VolumeSnapshot to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "{{ fullclusterfolder }}/auth/kubeconfig"
        kind: VolumeSnapshot
        namespace: "{{ namespace }}"
        name: "{{ snapshot_name }}"
      register: snap_info
      until: snap_info.resources[0].status.readyToUse
      retries: 20
      delay: 10

    - name: Create PVC from snapshot
      kubernetes.core.k8s:
        kubeconfig: "{{ fullclusterfolder }}/auth/kubeconfig"
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: "{{ cloned_pvc_name }}"
            namespace: "{{ namespace }}"
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: "{{ volume_size }}"
            storageClassName: "{{ storage_class }}"
            dataSource:
              name: "{{ snapshot_name }}"
              kind: VolumeSnapshot
              apiGroup: snapshot.storage.k8s.io
