---
- name: Install Gitea and minio
  hosts: kvm
  gather_facts: false
  become: true
  tasks:
    - name: Set root_wwn to be sure sda is the right disk
      ansible.builtin.set_fact:
        root_wwn: "disk/by-id/wwn-{{ giteas['gitea'].wwn }}"

    - name: Template kickstart file to the firewall where it is hosted
      ansible.builtin.template:
        src: ../templates/rhel-ks.yaml.j2
        dest: "/data/html/rhel-gitea.ks"
        mode: "0644"
      delegate_to: fw

    - name: Copy non-secure boot vars on rhel7
      ansible.builtin.command: |
        cp -f /usr/share/edk2/ovmf/OVMF_VARS.fd "/var/lib/libvirt/qemu/nvram/{{ item }}.fd"
      with_items: "{{ giteas }}"
      when: rhel_version is match("7.*")

    - name: Set bootloader fact
      ansible.builtin.set_fact:
        bootlines: "{{ bootlines | default({}) | combine({item: '--boot menu=on,useserial=on,uefi'}) }}"
      when: rhel_version is not match("7.*")
      with_items: "{{ giteas }}"

    - name: Set bootloader fact on rhel7
      ansible.builtin.set_fact:
        bootlines: "{{ bootlines | default({}) | combine({item: '--boot loader=/usr/share/edk2/ovmf/OVMF_CODE.secboot.fd,loader.readonly=yes,loader.secure=no,loader.type=pflash,nvram=/var/lib/libvirt/qemu/nvram/.fd'}) }}"
      when: rhel_version is match("7.*")
      with_items: "{{ giteas }}"

    - name: Create Gitea VMs
      ansible.builtin.command: >-
        virt-install
        --name {{ item }}
        --hvm
        --virt-type kvm
        --arch {{ arch }}
        --location {{ rhel_isos[giteas[item].version] }}
        --os-variant {{ rhel_variants[giteas[item].version] }}
        --network bridge="{{ bridge_interface }}",mac="{{ mac_prefix }}:{{ giteas[item].mac_nr }}"
        --vcpus {{ giteas[item].cpus }}
        --ram {{ giteas[item].ram }}
        --disk pool={{ rhel_pool }},size={{ giteas[item].disk }},format=qcow2,bus=scsi,cache={{ giteas[item].cache }},wwn={{ giteas[item].wwn }}
        --disk pool={{ rhel_pool }},size={{ giteas[item].disk2 }},format=qcow2,bus=scsi,cache={{ giteas[item].cache2 }},wwn={{ giteas[item].wwn2 }}
        --check disk_size=off
        --graphics spice,listen=127.0.0.1
        --noautoconsole
        --extra-args "inst.ks=http://fw.int.rhx/rhel-gitea.ks"
        {{ bootlines[item] }}
      with_items: "{{ giteas }}"
      retries: 2
      delay: 10
      register: vm_creation
      until: vm_creation is not failed

    - name: Wait for vm to be stopped
      ansible.builtin.shell: |
        set -e -o pipefail
        virsh list --all | grep -w "{{ item }}" | grep -v running
      register: running
      retries: 100
      delay: 20
      until: running is not failed
      with_items: "{{ giteas }}"

    - name: Start "{{ item }}"
      ansible.builtin.command: |
        virsh start "{{ item }}"
      with_items: "{{ giteas }}"
      retries: 3
      delay: 10
      register: restart
      until: restart is not failed

- name: Wait for RHEL boxes
  hosts: giteas
  gather_facts: false
  become: true
  vars:
    gitea_gpg: 7C9E68152594688862D62AF62D9AE806EC1592E2
    gitea_version: 1.21.5
    gitea_file: "gitea-{{ gitea_version }}-linux-amd64"
    gitea_url: "http://fw.int.rhx/{{ gitea_file }}"
    minio_file: "minio-20240418190919.0.0-1.x86_64.rpm"
    minio_client_file: "mcli-20240418164529.0.0-1.x86_64.rpm"
    minio_url: "http://fw.int.rhx/{{ minio_file }}"
    minio_client_url: "http://fw.int.rhx/{{ minio_client_file }}"
    upstream_repo: "https://github.com/mbaldessari/multicloud-gitops"
    downstream_name: "mcg"
    upstream_repo2: "https://github.com/mbaldessari/argocd-tests"
    downstream_name2: "argocd-tests"
  tasks:
    - name: Set extra_wwn to be sure sdb is the right disk
      ansible.builtin.set_fact:
        extra_wwn: "disk/by-id/wwn-{{ giteas['gitea'].wwn2 }}"

    - name: Wait for boxes
      ansible.builtin.wait_for_connection:

    - name: Download minio binary
      ansible.builtin.get_url:
        url: "{{ minio_url }}"
        dest: "/tmp/{{ minio_file }}"
        mode: "0755"
      environment:
        https_proxy: "{{ https_proxy | default('') }}"

    - name: Download minio client binary
      ansible.builtin.get_url:
        url: "{{ minio_client_url }}"
        dest: "/tmp/{{ minio_client_file }}"
        mode: "0755"
      environment:
        https_proxy: "{{ https_proxy | default('') }}"

    - name: Install minio rpm
      ansible.builtin.shell: |
        dnf install -y "/tmp/{{ minio_file }}" "/tmp/{{ minio_client_file }}"

    - name: Add minio-user user
      ansible.builtin.shell: |
        set -e -o pipefail
        groupadd --system minio-user
        adduser --system --shell /bin/bash \
          --comment 'MINIO' \
          --gid minio-user --home-dir /home/minio-user --create-home \
          minio-user

    - name: Template /etc/default/minio
      ansible.builtin.template:
        src: ../templates/minio-default.j2
        dest: /etc/default/minio
        mode: "0640"
        owner: minio-user
        group: minio-user

    - name: Create disks and mount
      ansible.builtin.shell: |
        set -e
        mkfs.xfs "/dev/{{ extra_wwn }}"
        mkdir /mnt/data
        mount "/dev/{{ extra_wwn }}" /mnt/data
        mkdir -p /mnt/data/disk{1,2,3,4}
        chown -R minio-user: /mnt/data/disk{1,2,3,4}

    - name: Add {{ extra_wwn }} in fstab
      ansible.posix.mount:
        state: present
        path: /mnt/data
        src: /dev/"{{ extra_wwn }}"
        fstype: xfs

    - name: Create minio folders
      ansible.builtin.shell: |
        set -e -o pipefail
        mkdir /etc/minio
        chown -R minio-user:minio-user /etc/minio
        chmod 750 /etc/minio

    - name: Copy TLS certs for minio
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /etc/minio/public.crt
        mode: "0640"
        owner: minio-user
        group: minio-user
      with_items:
        - /home/michele/ssl-ca/certs/gitea.ocplab.ocp.crt

    - name: Copy TLS certs for minio (2)
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /etc/minio/private.key
        mode: "0640"
        owner: minio-user
        group: minio-user
      with_items:
        - /home/michele/ssl-ca/certs/gitea.ocplab.ocp.key

    - name: Start minio
      ansible.builtin.systemd_service:
        name: minio
        state: started
        enabled: true

    - name: Init myminio
      ansible.builtin.shell: |
        set -e
        /usr/local/bin/mcli alias set {{ minio.org}} https://{{ minio.fqdn }}:9000 {{ minio.admin_user }} {{ minio.admin_pass }}
        /usr/local/bin/mcli admin user add {{ minio.org }} {{ minio.user }} {{ minio.pass }}
        /usr/local/bin/mcli mb --with-lock {{ minio.org }}/{{ minio.bucket }}
        /usr/local/bin/mcli admin user svcacct add {{ minio.org }} {{ minio.admin_user }} --name adminkey --description "adminkey" --access-key {{ minio.admin_access_key }} --secret-key {{ minio.admin_secret_key }}

    - name: Download gitea binary
      ansible.builtin.get_url:
        url: "{{ gitea_url }}"
        dest: "/tmp/{{ gitea_file }}"
        mode: "0755"
      environment:
        https_proxy: "{{ https_proxy | default('') }}"

    - name: Move git to proper path
      ansible.builtin.shell: |
        set -e -o pipefail
        mv /tmp/{{ gitea_file }} /usr/local/bin/gitea
        restorecon -v /usr/local/bin/gitea
        setcap CAP_NET_BIND_SERVICE=+eip /usr/local/bin/gitea

    - name: Add git user
      ansible.builtin.shell: |
        set -e -o pipefail
        groupadd --system git
        adduser --system --shell /bin/bash \
          --comment 'Git Version Control' \
          --gid git --home-dir /home/git --create-home \
          git

    - name: Create folders
      ansible.builtin.shell: |
        set -e -o pipefail
        mkdir -p /var/lib/gitea/{custom,data,log}
        chown -R git:git /var/lib/gitea/
        chmod -R 750 /var/lib/gitea/
        mkdir /etc/gitea
        chown root:git /etc/gitea
        chmod 770 /etc/gitea

    - name: Copy TLS certs on VM
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /etc/gitea
        mode: "0640"
        owner: git
        group: git
      with_items:
        - /home/michele/ssl-ca/certs/gitea.ocplab.ocp.crt
        - /home/michele/ssl-ca/certs/gitea.ocplab.ocp.key

    - name: Template app.ini
      ansible.builtin.template:
        src: ../templates/gitea-app.ini
        dest: /etc/gitea/app.ini
        mode: "0644"
        owner: git

    - name: Get systemd service
      ansible.builtin.shell: |
        set -e -o pipefail
        curl -L -o /etc/systemd/system/gitea.service https://raw.githubusercontent.com/go-gitea/gitea/main/contrib/systemd/gitea.service
        systemctl daemon-reload

    - name: Start gitea service
      ansible.builtin.systemd:
        name: gitea
        state: started
        enabled: true

    - name: Give the service some time
      ansible.builtin.pause:
        seconds: 30

    - name: Create gitea admin user
      become: true
      become_user: git
      ansible.builtin.shell: |
        /usr/local/bin/gitea  -c /etc/gitea/app.ini admin user create \
          --username "{{ gitea.admin_user }}" --password "{{ gitea.admin_pass }}" --email yo@yo.yo --admin

    - name: Generate an access token for admin user
      become: true
      become_user: git
      ansible.builtin.shell: |
        set -e -o pipefail
        /usr/local/bin/gitea  -c /etc/gitea/app.ini admin user generate-access-token \
        --username "{{ gitea.admin_user }}" --scopes 'write:repository,write:admin,write:user' --raw
      register: gitea_token

    - name: Set migration info
      ansible.builtin.set_fact:
        migration_info:
          clone_addr: "{{ upstream_repo }}"
          uid: 1
          repo_name: "{{ downstream_name }}"
          mirror: true
          private: false
          description: "Mirror"

    - name: Create repo
      ansible.builtin.uri:
        url: "{{ gitea.url }}/api/v1/repos/migrate"
        method: POST
        headers:
          Content-Type: application/json
          Authorization: token {{ gitea_token.stdout }}
        body_format: json
        body: "{{ migration_info }}"
        return_content: true
        status_code: [201, 409]
      register: migrate_out
      retries: 10
      delay: 10
      until: migrate_out is not failed

    - name: Set migration info2
      ansible.builtin.set_fact:
        migration_info2:
          clone_addr: "{{ upstream_repo2 }}"
          uid: 1
          repo_name: "{{ downstream_name2 }}"
          mirror: true
          private: false
          description: "Mirror"

    - name: Create repo2
      ansible.builtin.uri:
        url: "{{ gitea.url }}/api/v1/repos/migrate"
        method: POST
        headers:
          Content-Type: application/json
          Authorization: token {{ gitea_token.stdout }}
        body_format: json
        body: "{{ migration_info2 }}"
        return_content: true
        status_code: [201, 409]
      register: migrate_out
      retries: 10
      delay: 10
      until: migrate_out is not failed

    - name: Set ssh key facts
      ansible.builtin.set_fact:
        ssh_info:
          title: "My ssh key"
          key: "{{ sshkey }}"

    - name: Upload ssh key for user
      ansible.builtin.uri:
        url: "{{ gitea.url }}/api/v1/user/keys"
        method: POST
        headers:
          Content-Type: application/json
          Authorization: token {{ gitea_token.stdout }}
        body_format: json
        body: "{{ ssh_info }}"
        return_content: true
        status_code: 201
      register: ssh_out
      retries: 10
      delay: 10
      until: ssh_out is not failed
