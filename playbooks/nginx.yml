---
- name: Install nginx vm
  hosts: kvm
  gather_facts: false
  become: true
  tasks:
    - name: Set root_wwn to be sure sda is the right disk
      ansible.builtin.set_fact:
        root_wwn: "disk/by-id/wwn-{{ full_cluster['nginx'].wwn }}"

    - name: Template kickstart file to the firewall where it is hosted
      ansible.builtin.template:
        src: ../templates/rhel-nginx-ks.yaml.j2
        dest: "/var/www/html/rhel-nginx.ks"
        mode: "0644"
      delegate_to: fw

    - name: Set bootloader fact
      ansible.builtin.set_fact:
        bootlines: "{{ bootlines | default({}) | combine({item: '--boot menu=on,useserial=on,uefi'}) }}"
      with_items:
        - nginx

    - name: Create Nginx VM
      ansible.builtin.command: >-
        virt-install
        --name {{ item }}
        --hvm
        --virt-type kvm
        --arch {{ arch }}
        --location {{ rhel_isos[rhel_version] }}
        --os-variant {{ rhel_variants[rhel_version] }}
        --network bridge="{{ bridge_interface }}",mac="{{ mac_prefix }}:{{ full_cluster[item].mac_nr }}"
        --vcpus {{ full_cluster[item].cpus }}
        --ram {{ full_cluster[item].ram }}
        --disk pool={{ rhel_pool }},size={{ full_cluster[item].disk }},format=qcow2,bus=scsi,cache={{ full_cluster[item].cache }},wwn={{ full_cluster[item].wwn }},serial=root
        --disk pool={{ rhel_pool }},size={{ full_cluster[item].disk2 }},format=qcow2,bus=scsi,cache={{ full_cluster[item].cache2 }},wwn={{ full_cluster[item].wwn2 }},serial={{ diskserial }}
        --check disk_size=off
        --graphics spice,listen=127.0.0.1
        --noautoconsole
        --extra-args "inst.ks=http://fw.int.rhx/rhel-nginx.ks"
        {{ bootlines[item] }}
      with_items:
        - "nginx"
      retries: 2
      delay: 10
      register: vm_creation
      until: vm_creation is not failed

    - name: Wait for vm to be stopped
      ansible.builtin.shell: |
        set -e -o pipefail
        virsh list --all | grep -w "{{ item }}" | grep -v running
      register: running
      retries: 100
      delay: 20
      until: running is not failed
      with_items:
        - "nginx"

    - name: Start "{{ item }}"
      ansible.builtin.command: |
        virsh start "{{ item }}"
      with_items:
        - "nginx"
      retries: 3
      delay: 10
      register: restart
      until: restart is not failed

- name: Wait for nginx boxes
  hosts: nginx
  gather_facts: false
  become: true
  vars:
    minio_file: "minio-20240418190919.0.0-1.x86_64.rpm"
    minio_client_file: "mcli-20240418164529.0.0-1.x86_64.rpm"
    minio_url: "http://fw.int.rhx/{{ minio_file }}"
    minio_client_url: "http://fw.int.rhx/{{ minio_client_file }}"
  tasks:
    - name: Wait for boxes
      ansible.builtin.wait_for_connection:

    - name: Allow nginx(http_port_t) to listen on extra tcp ports
      tags:
        - nginx-setup
      community.general.seport:
        ports: "{{ item }}"
        proto: tcp
        setype: http_port_t
        state: present
      with_items:
          - "6443"
          - "8000"
          - "22623"

    - name: Set seboolean flag on and keep it persistent across reboots
      tags:
        - nginx-setup
      ansible.posix.seboolean:
        name: "{{ item }}"
        state: true
        persistent: true
        ignore_selinux_state: true
      with_items:
          - "httpd_can_network_connect"
          - "httpd_graceful_shutdown"
          - "httpd_can_network_relay"
          - "nis_enabled"
          - "daemons_dump_core"

    - name: Setup nginx config file
      tags:
        - nginx-setup
      ansible.builtin.template:
        src: "../templates/nginx_conf.j2"
        dest: /etc/nginx/nginx.conf
        selevel: s0
        serole: object_r
        setype: httpd_config_t
        seuser: system_u
        mode: "0640"
      vars:
        bootstrap: true

    - name: Start and enable nginx
      tags:
        - nginx-setup
      ansible.builtin.systemd_service:
        name: nginx
        state: started
        enabled: true

    - name: Download minio binary
      ansible.builtin.get_url:
        url: "{{ minio_url }}"
        dest: "/tmp/{{ minio_file }}"
        mode: "0755"
      environment:
        https_proxy: "{{ https_proxy | default('') }}"

    - name: Download minio client binary
      ansible.builtin.get_url:
        url: "{{ minio_client_url }}"
        dest: "/tmp/{{ minio_client_file }}"
        mode: "0755"
      environment:
        https_proxy: "{{ https_proxy | default('') }}"

    - name: Install minio rpm
      ansible.builtin.shell: |
        dnf install -y "/tmp/{{ minio_file }}" "/tmp/{{ minio_client_file }}"

    - name: Add minio-user user
      ansible.builtin.shell: |
        set -e -o pipefail
        groupadd --system minio-user
        adduser --system --shell /bin/bash \
          --comment 'MINIO' \
          --gid minio-user --home-dir /home/minio-user --create-home \
          minio-user

    - name: Template /etc/default/minio
      ansible.builtin.template:
        src: ../templates/minio-default.j2
        dest: /etc/default/minio
        mode: "0640"
        owner: minio-user
        group: minio-user

    - name: Set extra_wwn to be sure sdb is the right disk
      ansible.builtin.set_fact:
        extra_wwn: "disk/by-id/wwn-{{ full_cluster['nginx'].wwn2 }}"

    - name: Create disks and mount
      ansible.builtin.shell: |
        set -e
        mkfs.xfs "/dev/{{ extra_wwn }}"
        mkdir /mnt/data
        mount "/dev/{{ extra_wwn }}" /mnt/data
        mkdir -p /mnt/data/disk{1,2,3,4}
        chown -R minio-user: /mnt/data/disk{1,2,3,4}

    - name: Add {{ extra_wwn }} in fstab
      ansible.posix.mount:
        state: present
        path: /mnt/data
        src: /dev/"{{ extra_wwn }}"
        fstype: xfs

    - name: Create minio folders
      ansible.builtin.shell: |
        set -e -o pipefail
        mkdir /etc/minio
        chown -R minio-user:minio-user /etc/minio
        chmod 750 /etc/minio

    - name: Copy TLS certs for minio
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /etc/minio/public.crt
        mode: "0640"
        owner: minio-user
        group: minio-user
      with_items:
        - /home/michele/ssl-ca/certs/nginx.ocplab.ocp.crt

    - name: Copy TLS certs for minio (2)
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /etc/minio/private.key
        mode: "0640"
        owner: minio-user
        group: minio-user
      with_items:
        - /home/michele/ssl-ca/certs/nginx.ocplab.ocp.key

    - name: Start minio
      ansible.builtin.systemd_service:
        name: minio
        state: started
        enabled: true

    - name: Init myminio
      ansible.builtin.shell: |
        set -e
        /usr/local/bin/mcli alias set {{ minio.org}} https://{{ minio.fqdn }}:9000 {{ minio.admin_user }} {{ minio.admin_pass }}
        /usr/local/bin/mcli admin user add {{ minio.org }} {{ minio.user }} {{ minio.pass }}
        /usr/local/bin/mcli mb --with-lock {{ minio.org }}/{{ minio.bucket }}
        /usr/local/bin/mcli admin user svcacct add {{ minio.org }} {{ minio.admin_user }} --name adminkey --description "adminkey" --access-key {{ minio.admin_access_key }} --secret-key {{ minio.admin_secret_key }}
