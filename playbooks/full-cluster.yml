---
- name: Install full cluster
  hosts: kvm
  gather_facts: false
  become: true
  tasks:
    - name: Remove full cluster folder
      ansible.builtin.file:
        path: "{{ fullclusterfolder }}"
        state: absent

    - name: Create full cluster config folder
      ansible.builtin.file:
        path: "{{ fullclusterfolder }}"
        state: directory
        recurse: true

    - name: Prepare install-config.yaml for full cluster debugging
      ansible.builtin.template:
        src: ../templates/full-cluster-install-config.j2.yaml
        dest: "{{ tempfolder }}/full-cluster-install-config.yaml"
        mode: "0640"

    - name: Prepare install-config.yaml for full cluster
      ansible.builtin.template:
        src: ../templates/full-cluster-install-config.j2.yaml
        dest: "{{ fullclusterfolder }}/install-config.yaml"
        mode: "0640"

    - name: Create full cluster manifests
      ansible.builtin.command: |
        "{{ mirrorfolder }}/{{ ocp_version }}/openshift-install" create manifests --dir=.
      args:
        chdir: "{{ fullclusterfolder }}"

    - name: Create full cluster ignition configs
      ansible.builtin.command: |
        "{{ mirrorfolder }}/{{ ocp_version }}/openshift-install" create ignition-configs --dir=.
      args:
        chdir: "{{ fullclusterfolder }}"

    - name: Make all files readable
      ansible.builtin.file:
        path: "{{ fullclusterfolder }}"
        mode: u=rwX,g=rX,o=rX
        recurse: true

    - name: Run coreos ignition embedding for bootstrap node
      ansible.builtin.shell: |
        set -xe -o pipefail
        cp {{ mirrorfolder }}/{{ ocp_version }}/rhcos-live.iso "{{ fullclusterfolder }}/{{ item }}-rhcos-live.iso"
        export IGNITION=$(echo "{{ item }}" | sed -e 's/-.*$//')
        echo "${IGNITION}"
        podman run --privileged --pull always --rm \
            -v /dev:/dev -v /run/udev:/run/udev -v "{{ fullclusterfolder }}:/data" \
            -w /data quay.io/coreos/coreos-installer:release \
            iso customize "{{ item }}-rhcos-live.iso" --dest-ignition "${IGNITION}".ign \
            --dest-device "/dev/disk/by-id/wwn-{{ full_cluster[item].wwn }}"
      args:
        chdir: "{{ tempfolder }}"
      register: test
      with_items:
        - bootstrap
        - master-0
        - master-1
        - master-2
        - worker-0
        - worker-1
        - worker-2
        - worker-3

    - name: "Create bootstrap VM"
      ansible.builtin.command: >-
        virt-install
        --name {{ item }}
        --hvm
        --virt-type kvm
        --arch {{ arch }}
        --cdrom {{ fullclusterfolder }}/{{ item }}-rhcos-live.iso
        --os-variant rhel8.0
        --network bridge="{{ bridge_interface }}",mac="{{ mac_prefix }}:{{ full_cluster[item].mac_nr }}"
        --vcpus {{ full_cluster[item].cpus }}
        --ram {{ full_cluster[item].ram }}
        --disk pool={{ rhel_pool }},size={{ full_cluster[item].disk }},format=qcow2,bus=scsi,cache={{ full_cluster[item].cache }},wwn={{ full_cluster[item].wwn }}
        --disk pool={{ rhel_pool }},size={{ full_cluster[item].disk2 }},format=qcow2,bus=scsi,cache={{ full_cluster[item].cache2 }},wwn={{ full_cluster[item].wwn2 }}
        --check disk_size=off
        --graphics spice,listen=127.0.0.1
        --noautoconsole
      with_items:
        - bootstrap
        - master-0
        - master-1
        - master-2
        - worker-0
        - worker-1
        - worker-2
        - worker-3
      retries: 0
      delay: 10
      register: vm_creation
      until: vm_creation is not failed

    - name: Remove ISOs
      ansible.builtin.shell: |
        set -e
        rm -f "{{ item }}-live.iso"
      args:
        chdir: "{{ tempfolder }}"
      with_items:
        - bootstrap
        - master-0
        - master-1
        - master-2
        - worker-0
        - worker-1
        - worker-2
        - worker-3

    - name: Wait for vm to be stopped
      ansible.builtin.shell: |
        set -e -o pipefail
        virsh list --all | grep -w "{{ item }}" | grep -v running
      register: running
      retries: 100
      delay: 20
      until: running is not failed
      with_items:
        - bootstrap
        - master-0
        - master-1
        - master-2
        - worker-0
        - worker-1
        - worker-2
        - worker-3

    - name: Start "{{ item }}"
      ansible.builtin.command: |
        virsh start "{{ item }}"
      with_items:
        - bootstrap
        - master-0
        - master-1
        - master-2
        - worker-0
        - worker-1
        - worker-2
        - worker-3
      retries: 3
      delay: 10
      register: restart
      until: restart is not failed

    - name: Wait for bootstrap process to complete
      ansible.builtin.command: |
        "{{ mirrorfolder }}/{{ ocp_version }}/openshift-install" --dir=. wait-for bootstrap-complete --log-level=info
      args:
        chdir: "{{ fullclusterfolder }}"

    - name: Check if vms already exists
      community.libvirt.virt:
        command: list_vms
      register: all_vms

    - name: Destroy {{ item }}
      ansible.builtin.shell: |
        virsh destroy {{ item }}
        virsh undefine --nvram --remove-all-storage {{ item }}
      when: 'item in all_vms.list_vms'
      with_items:
       - bootstrap

    - name: Fetch kubeconfig file
      ansible.posix.synchronize:
        mode: pull
        src: "{{ tempfolder }}/fullcluster/auth/kubeconfig"
        dest: "~/fullcluster-kubeconfig"

    - name: Fix permissions
      ansible.builtin.shell: |
        chmod 0600 "/home/michele/fullcluster-kubeconfig"
      delegate_to: localhost

    - name: Approve all machines
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ tempfolder }}/fullcluster/auth/kubeconfig"
        "{{ mirrorfolder }}/{{ ocp_version }}"/oc get csr -o {% raw %}go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}{% endraw %}' | xargs --no-run-if-empty oc adm certificate approve
      register: csr
      until: csr is not failed
      retries: 15
      delay: 10

    - name: Wait for installation completion
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ tempfolder }}/fullcluster/auth/kubeconfig"
        "{{ mirrorfolder }}/{{ ocp_version }}/openshift-install" --dir=. wait-for install-complete --log-level=info

    - name: Reset ca folder
      ansible.builtin.shell: |
        mkdir -p "{{ ca_folder }}"
        rm -f "{{ ca_folder }}/{{ item }}-ca-kube"
      with_items:
        - fullcluster

    - name: Does the firefox profile exist
      ansible.builtin.stat:
        path: "{{ firefox_profile }}"
      register: profile_path

    - name: Init firefox profile path
      ansible.builtin.shell: |
        mkdir -p "{{ firefox_profile }}"
      when: not profile_path.stat.exists

    # KUBECONFIG certificate-authority-data has the CA only for the API endpoint, we want all of them
    # /home/michele/Bin/yq '.clusters[0].cluster.certificate-authority-data' {{ item }}-kubeconfig | base64 -d > "{{ ca_folder }}/{{ item }}-ca-api"
    - name: Fetch all CAs for each cluster
      ansible.builtin.shell: |
        set -x -e -o pipefail
        export KUBECONFIG=/home/michele/{{ item }}-kubeconfig
        oc get -n default configmap/kube-root-ca.crt -o jsonpath="{.data.ca\.crt}" > "{{ ca_folder }}/{{ item }}-ca-kube"
      with_items:
        - fullcluster
      retries: 5
      delay: 10
      register: pki_import
      until: pki_import is not failed

    - name: Delete exiting CAs from SNOs
      ansible.builtin.shell: |
        set -e -o pipefail
        rm -f {{ ca_folder }}/{{ item }}-cert*pem
        awk 'BEGIN {c=0;} /BEGIN CERTIFICATE/ {c++} {print > "{{ item }}-cert" c ".pem"}' < {{ ca_folder }}/{{ item }}-ca-kube
        for i in {{ item }}-cert*; do
          certutil -D -n "{{ item }}-$i-kube" -d sql:"{{ firefox_profile }}" || true
        done
      args:
        chdir: "{{ ca_folder }}"
      with_items:
        - fullcluster
      retries: 5
      delay: 10
      register: pki_import
      until: pki_import is not failed

    - name: Import all CAs into my firefox profile
      ansible.builtin.shell: |
        set -e -o pipefail
        rm -f {{ ca_folder }}/cert*
        awk 'BEGIN {c=0;} /BEGIN CERTIFICATE/ {c++} {print > "{{ item }}-cert" c ".pem"}' < {{ ca_folder }}/{{ item }}-ca-kube
        for i in {{ item }}-cert*; do
          certutil -A -n "{{ item }}-$i-kube" -t "TC,C,C"  -i "$i" -d sql:"{{ firefox_profile }}"
        done
      args:
        chdir: "{{ ca_folder }}"
      with_items:
        - fullcluster
      retries: 10
      delay: 10
      register: pki_import
      until: pki_import is not failed
