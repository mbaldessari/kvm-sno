---
- name: Install full cluster
  hosts: kvm
  gather_facts: false
  become: true
  # strategy: ansible.builtin.free
  # roles:
  #   - full_cluster
  tasks:
    - name: Set bootloader fact
      ansible.builtin.set_fact:
        bootlines: "{{ bootlines | default({}) | combine({item: '--boot menu=on,useserial=on,uefi'}) }}"
      with_items:
        - "bootstrap"

    - name: Run coreos ignition embedding for bootstrap node
      ansible.builtin.shell: |
        set -xe -o pipefail
        cp {{ mirrorfolder }}/{{ ocp_version }}/rhcos-live.iso "{{ fullclusterfolder }}/{{ item }}-rhcos-live.iso"
        export IGNITION=$(echo "{{ item }}" | sed -e 's/-.*$//')
        echo "${IGNITION}"
        podman run --privileged --pull always --rm \
            -v /dev:/dev -v /run/udev:/run/udev -v "{{ fullclusterfolder }}:/data" \
            -w /data quay.io/coreos/coreos-installer:release \
            iso customize "{{ item }}-rhcos-live.iso" --dest-ignition "${IGNITION}".ign \
            --dest-device "/dev/disk/by-id/wwn-{{ full_cluster[item].wwn }}"
      args:
        chdir: "{{ tempfolder }}"
      register: test
      with_items:
        - bootstrap
        - master-0
        - master-1
        - master-2
        - worker-0
        - worker-1
        - worker-2
        - worker-3

    - name: "Create bootstrap VM"
      ansible.builtin.command: >-
        virt-install
        --name {{ item }}
        --hvm
        --virt-type kvm
        --arch {{ arch }}
        --cdrom {{ fullclusterfolder }}/{{ item }}-rhcos-live.iso
        --os-variant rhel8.0
        --network bridge="{{ bridge_interface }}",mac="{{ mac_prefix }}:{{ full_cluster[item].mac_nr }}"
        --vcpus {{ full_cluster[item].cpus }}
        --ram {{ full_cluster[item].ram }}
        --disk pool={{ rhel_pool }},size={{ full_cluster[item].disk }},format=qcow2,bus=scsi,cache={{ full_cluster[item].cache }},wwn={{ full_cluster[item].wwn }}
        --disk pool={{ rhel_pool }},size={{ full_cluster[item].disk2 }},format=qcow2,bus=scsi,cache={{ full_cluster[item].cache2 }},wwn={{ full_cluster[item].wwn2 }}
        --check disk_size=off
        --graphics spice,listen=127.0.0.1
        --noautoconsole
      with_items:
        - bootstrap
        - master-0
        - master-1
        - master-2
        - worker-0
        - worker-1
        - worker-2
        - worker-3
      retries: 0
      delay: 10
      register: vm_creation
      until: vm_creation is not failed

    - name: Remove ISOs
      ansible.builtin.shell: |
        set -e
        rm -f "{{ item }}-live.iso"
      args:
        chdir: "{{ tempfolder }}"
      with_items:
        - bootstrap
        - master-0
        - master-1
        - master-2
        - worker-0
        - worker-1
        - worker-2
        - worker-3

    - name: Wait for vm to be stopped
      ansible.builtin.shell: |
        set -e -o pipefail
        virsh list --all | grep -w "{{ item }}" | grep -v running
      register: running
      retries: 100
      delay: 20
      until: running is not failed
      with_items:
        - bootstrap
        - master-0
        - master-1
        - master-2
        - worker-0
        - worker-1
        - worker-2
        - worker-3

    - name: Start "{{ item }}"
      ansible.builtin.command: |
        virsh start "{{ item }}"
      with_items:
        - bootstrap
        - master-0
        - master-1
        - master-2
        - worker-0
        - worker-1
        - worker-2
        - worker-3
      retries: 3
      delay: 10
      register: restart
      until: restart is not failed

    - name: Wait for bootstrap process to complete
      ansible.builtin.command: |
        "{{ mirrorfolder }}/{{ ocp_version }}/openshift-install" --dir=. wait-for bootstrap-complete --log-level=info
      args:
        chdir: "{{ fullclusterfolder }}"

    - name: Check if vms already exists
      community.libvirt.virt:
        command: list_vms
      register: all_vms

    - name: Destroy {{ item }}
      ansible.builtin.shell: |
        virsh destroy {{ item }}
        virsh undefine --nvram --remove-all-storage {{ item }}
      when: 'item in all_vms.list_vms'
      with_items:
       - bootstrap

    - name: Approve all machines
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ tempfolder }}/fullcluster/auth/kubeconfig"
        "{{ mirrorfolder }}/{{ ocp_version }}"/oc get csr -o {% raw %}go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}{% endraw %}' | xargs --no-run-if-empty oc adm certificate approve

    - name: Wait for installation completion
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ tempfolder }}/fullcluster/auth/kubeconfig"
        "{{ mirrorfolder }}/{{ ocp_version }}/openshift-install" --dir=. wait-for install-complete --log-level=info
