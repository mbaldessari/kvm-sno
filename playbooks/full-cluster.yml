---
- name: Set firewall rules
  hosts: fw
  gather_facts: false
  become: true
  vars:
    all_nodes:
    - nginx
    - bootstrap
    - master-0
    - master-1
    - master-2
    - worker-0
    - worker-1
    - worker-2
    - worker-3
    - worker-4
    - worker-5

  tasks:
    - name: Set rules to REJECT for Full cluster
      ansible.builtin.lineinfile:
        path: /etc/shorewall/rules
        regexp: '^.*lab:{{ full_cluster[item].ip }}.*web$'
        line: "REJECT         lab:{{ full_cluster[item].ip }}              web"
        owner: root
        group: root
        mode: "0600"
      when: enable_disconnected
      loop: "{{ all_nodes }}"

    - name: Set rules to ALLOW for Full cluster
      ansible.builtin.lineinfile:
        path: /etc/shorewall/rules
        regexp: '^.*lab:{{ full_cluster[item].ip }}.*web$'
        line: "ACCEPT         lab:{{ full_cluster[item].ip }}              web"
        owner: root
        group: root
        mode: "0600"
      when: not enable_disconnected
      loop: "{{ all_nodes }}"

    - name: Restart shorewall
      ansible.builtin.systemd:
        name: shorewall
        state: restarted

- name: Wait for nginx reload
  hosts: nginx
  gather_facts: false
  become: true
  tasks:
    - name: Setup nginx config file
      tags:
        - nginx-setup
      ansible.builtin.template:
        src: "../templates/nginx_conf.j2"
        dest: /etc/nginx/nginx.conf
        selevel: s0
        serole: object_r
        setype: httpd_config_t
        seuser: system_u
        mode: "0640"
      vars:
        bootstrap: true

    - name: Start and enable nginx
      tags:
        - nginx-setup
      ansible.builtin.systemd_service:
        name: nginx
        state: restarted
        enabled: true

- name: Install full cluster
  hosts: kvm
  gather_facts: false
  become: true
  vars:
    ocp_nodes:
    - bootstrap
    - master-0
    - master-1
    - master-2
    - worker-0
    - worker-1
    - worker-2
    - worker-3
    # - worker-4
    # - worker-5
    san_nodes:
    - bootstrap
    - master-0
    - master-1
    - master-2
    - worker-0
    - worker-1
    - worker-2
    - worker-3

    nonsan_nodes:
    # - worker-4
    # - worker-5
  tasks:
    - name: Notify bandini
      ansible.builtin.shell: |
        curl -X POST http://raspyclock.int.rhx:8080/job -d "start"
      failed_when: false

    - name: Check that the mirror bits are correct
      ansible.builtin.shell: |
        set -ex
        if ! grep -q "detected minimum version as {{ ocp_version }}" /var/log/oc-mirror.log ; then
          echo "WRONG VERSION"
          exit 1
        fi

    - name: Set up iscsi on the kvm node
      ansible.builtin.shell: |
        #!/bin/bash
        set -ex
        systemctl stop target.service
        rm -rf /etc/target/saveconfig.json /var/lib/iscsi_disks/
        rm -rf /var/lib/iscsi_disks /var/lib/libvirt/iscsi_disks
        systemctl start target.service
        targetcli clearconfig confirm=True
        mkdir -p /var/lib/libvirt/iscsi_disks
        targetcli backstores/fileio create iscsi_disk1 /var/lib/libvirt/iscsi_disks/disk1.img 70G
        targetcli backstores/fileio create iscsi_disk2 /var/lib/libvirt/iscsi_disks/disk2.img 80G
        targetcli iscsi/ create iqn.2024-02.com.example
        targetcli iscsi/iqn.2024-02.com.example/tpg1/luns/ create /backstores/fileio/iscsi_disk1
        targetcli iscsi/iqn.2024-02.com.example/tpg1/luns/ create /backstores/fileio/iscsi_disk2
        targetcli iscsi/iqn.2024-02.com.example/tpg1/ set attribute generate_node_acls=1  authentication=0 demo_mode_write_protect=0 cache_dynamic_acls=1

    - name: Remove full cluster folder
      ansible.builtin.file:
        path: "{{ fullclusterfolder }}"
        state: absent

    - name: Create full cluster config folder
      ansible.builtin.file:
        path: "{{ fullclusterfolder }}"
        state: directory
        recurse: true

    - name: Prepare install-config.yaml for full cluster debugging
      ansible.builtin.template:
        src: ../templates/full-cluster-install-config.j2.yaml
        dest: "{{ tempfolder }}/full-cluster-install-config.yaml"
        mode: "0640"
      vars:
        enable_caching: true

    - name: Prepare install-config.yaml for full cluster
      ansible.builtin.template:
        src: ../templates/full-cluster-install-config.j2.yaml
        dest: "{{ fullclusterfolder }}/install-config.yaml"
        mode: "0640"
      vars:
        enable_caching: true

    - name: Set openshift-install command
      ansible.builtin.set_fact:
        oc_install: "{{ oc_dir }}/openshift-install"
      when: not fips_enabled

    - name: Set openshift-install command FIPS
      ansible.builtin.set_fact:
        oc_install: "{{ oc_dir }}/openshift-install-fips"
      when: fips_enabled

    - name: Create full cluster manifests
      ansible.builtin.shell: |
        set -e
        export OPENSHIFT_INSTALL_SKIP_HOSTCRYPT_VALIDATION=true
        "{{ oc_install }}" create manifests --dir=.
      args:
        chdir: "{{ fullclusterfolder }}"

    - name: Create full cluster ignition configs
      ansible.builtin.shell: |
        set -e
        export OPENSHIFT_INSTALL_SKIP_HOSTCRYPT_VALIDATION=true
        "{{ oc_install }}" create ignition-configs --dir=.
      args:
        chdir: "{{ fullclusterfolder }}"

    - name: Make all files readable
      ansible.builtin.file:
        path: "{{ fullclusterfolder }}"
        mode: u=rwX,g=rX,o=rX
        recurse: true

    - name: Run coreos ignition embedding for bootstrap node
      ansible.builtin.shell: |
        set -xe -o pipefail
        cp {{ oc_dir }}/rhcos-live.iso "{{ fullclusterfolder }}/{{ item }}-rhcos-live.iso"
        export IGNITION=$(echo "{{ item }}" | sed -e 's/-.*$//')
        echo "${IGNITION}"
        podman run --privileged --pull always --rm \
            -v /dev:/dev -v /run/udev:/run/udev -v "{{ fullclusterfolder }}:/data" \
            -w /data quay.io/coreos/coreos-installer:release \
            iso customize "{{ item }}-rhcos-live.iso" --dest-ignition "${IGNITION}".ign \
            --dest-device "/dev/disk/by-id/wwn-{{ full_cluster[item].wwn }}"
      args:
        chdir: "{{ tempfolder }}"
      register: test
      with_items: "{{ ocp_nodes }}"

    - name: "Create bootstrap VM, masters and workers"
      ansible.builtin.command: >-
        virt-install
        --name {{ item }}
        --hvm
        --virt-type kvm
        --arch {{ arch }}
        --cdrom {{ fullclusterfolder }}/{{ item }}-rhcos-live.iso
        --os-variant rhel8.0
        --network bridge="{{ bridge_interface }}",mac="{{ mac_prefix }}:{{ full_cluster[item].mac_nr }}"
        --vcpus {{ full_cluster[item].cpus }}
        --ram {{ full_cluster[item].ram }}
        --disk pool={{ rhel_pool }},size={{ full_cluster[item].disk }},format=qcow2,bus=scsi,cache={{ full_cluster[item].cache }},wwn={{ full_cluster[item].wwn }},serial={{ diskserial }}
        --disk pool={{ rhel_pool }},size={{ full_cluster[item].disk2 }},format=qcow2,bus=scsi,cache={{ full_cluster[item].cache2 }},wwn={{ full_cluster[item].wwn2 }},serial={{ diskserial2 }}
        --disk pool={{ rhel_pool }},size={{ full_cluster[item].disk3 }},format=qcow2,bus=scsi,cache={{ full_cluster[item].cache3 }},wwn={{ full_cluster[item].wwn3 }},serial={{ diskserial3 }}
        --disk /dev/sdh1,device=disk,bus=scsi,wwn=0xf00df00df00df00d,cache=unsafe --check path_in_use=off
        --check disk_size=off
        --graphics spice,listen=127.0.0.1
        --noautoconsole
      with_items: "{{ san_nodes }}"
      retries: 0
      delay: 10
      register: vm_creation
      until: vm_creation is not failed
      # {% if item in ["worker-1", "worker-2", "worker-3"] %} --disk /dev/sdh1,device=disk,bus=scsi,wwn=0xf00df00df00df00d --check path_in_use=off {% endif %}
      # {% if item in ["worker-0", "worker-1", "worker-2"] %} --disk /dev/sdh2,device=disk,bus=scsi,wwn=0xcafecafecafecafe --check path_in_use=off {% endif %}

    # - name: "Create bootstrap VM, masters and workers"
    #   ansible.builtin.command: >-
    #     virt-install
    #     --name {{ item }}
    #     --hvm
    #     --virt-type kvm
    #     --arch {{ arch }}
    #     --cdrom {{ fullclusterfolder }}/{{ item }}-rhcos-live.iso
    #     --os-variant rhel8.0
    #     --network bridge="{{ bridge_interface }}",mac="{{ mac_prefix }}:{{ full_cluster[item].mac_nr }}"
    #     --vcpus {{ full_cluster[item].cpus }}
    #     --ram {{ full_cluster[item].ram }}
    #     --disk pool={{ rhel_pool }},size={{ full_cluster[item].disk }},format=qcow2,bus=scsi,cache={{ full_cluster[item].cache }},wwn={{ full_cluster[item].wwn }},serial={{ diskserial }}
    #     --check disk_size=off
    #     --graphics spice,listen=127.0.0.1
    #     --noautoconsole
    #   with_items: "{{ nonsan_nodes }}"
    #   retries: 0
    #   delay: 10
    #   register: vm_creation
    #   until: vm_creation is not failed

    - name: Wait for vm to be stopped
      ansible.builtin.shell: |
        set -e -o pipefail
        virsh list --all | grep -w "{{ item }}" | grep -v running
      register: running
      retries: 100
      delay: 20
      until: running is not failed
      with_items: "{{ ocp_nodes }}"

    - name: Start "{{ item }}"
      ansible.builtin.command: |
        virsh start "{{ item }}"
      with_items: "{{ ocp_nodes }}"
      retries: 3
      delay: 10
      register: restart
      until: restart is not failed

    - name: Remove ISOs
      ansible.builtin.shell: |
        set -ex
        pwd
        rm -vf "{{ item }}-live.iso"
      register: iso_rm
      args:
        chdir: "{{ fullclusterfolder }}"
      with_items: "{{ ocp_nodes }}"

    - name: Wait for bootstrap process to complete
      ansible.builtin.shell: |
        set -e
        export OPENSHIFT_INSTALL_SKIP_HOSTCRYPT_VALIDATION=true
        "{{ oc_install }}" --dir=. wait-for bootstrap-complete --log-level=debug
      args:
        chdir: "{{ fullclusterfolder }}"

- name: Wait for nginx reload
  hosts: nginx
  gather_facts: false
  become: true
  tasks:
    - name: Setup nginx config file
      tags:
        - nginx-setup
      ansible.builtin.template:
        src: "../templates/nginx_conf.j2"
        dest: /etc/nginx/nginx.conf
        selevel: s0
        serole: object_r
        setype: httpd_config_t
        seuser: system_u
        mode: "0640"
      vars:
        bootstrap: false

    - name: Restart and enable nginx
      tags:
        - nginx-setup
      ansible.builtin.systemd_service:
        name: nginx
        state: restarted
        enabled: true

- name: Install full cluster
  hosts: kvm
  gather_facts: false
  become: true
  tasks:
    - name: Fetch kubeconfig file
      ansible.posix.synchronize:
        mode: pull
        src: "{{ fullclusterfolder }}/auth/kubeconfig"
        dest: "~/fullcluster-kubeconfig"

    - name: Fix permissions
      ansible.builtin.shell: |
        chmod 0600 "/home/michele/fullcluster-kubeconfig"
      delegate_to: localhost

    - name: Check if vms already exists
      community.libvirt.virt:
        command: list_vms
      register: all_vms

    - name: Destroy {{ item }}
      ansible.builtin.shell: |
        virsh destroy {{ item }}
        virsh undefine --nvram --remove-all-storage {{ item }}
      when: 'item in all_vms.list_vms'
      with_items:
       - bootstrap

    - name: Approve all machines until we have six workers
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
        COUNT=$(oc get nodes -l "node-role.kubernetes.io/worker" --no-headers)
        if [ ${COUNT} -eq 6 ]; then
            exit 0
        fi
        {{ oc_bin }} get csr -o {% raw %}go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}{% endraw %}' | xargs --no-run-if-empty {{ oc_bin }} adm certificate approve
      register: csr
      until: csr is not failed
      retries: 25
      delay: 10

    - name: Approve all machines again
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
        {{ oc_bin }} get csr -o {% raw %}go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}{% endraw %}' | xargs --no-run-if-empty {{ oc_bin }} adm certificate approve
        sleep 10
        {{ oc_bin }} get csr -o {% raw %}go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}{% endraw %}' | xargs --no-run-if-empty {{ oc_bin }} adm certificate approve
      register: csr
      until: csr is not failed
      retries: 5
      delay: 10

    - name: Wait some more time
      tags:
        - purple
      ansible.builtin.pause:
        minutes: 3

    - name: Approve all machines again
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
        {{ oc_bin }} get csr -o {% raw %}go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}{% endraw %}' | xargs --no-run-if-empty {{ oc_bin }} adm certificate approve
        sleep 10
        {{ oc_bin }} get csr -o {% raw %}go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}{% endraw %}' | xargs --no-run-if-empty {{ oc_bin }} adm certificate approve
      register: csr
      until: csr is not failed
      retries: 5
      delay: 10

    - name: Wait for installation completion
      ansible.builtin.shell: |
        set -e -o pipefail
        export OPENSHIFT_INSTALL_SKIP_HOSTCRYPT_VALIDATION=true
        "{{ oc_install }}" --dir=. wait-for install-complete --log-level=debug
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
        {{ oc_bin }} get csr -o {% raw %}go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}{% endraw %}' | xargs --no-run-if-empty {{ oc_bin }} adm certificate approve
      retries: 2
      delay: 5
      register: wait_for_install
      until: wait_for_install is not failed
      args:
        chdir: "{{ fullclusterfolder }}"

    - name: Set kubeadmin password
      ansible.builtin.shell: |
        set -e -o pipefail
        PASS=$(python3 -c 'import bcrypt; print(bcrypt.hashpw(b"{{ kubeadmin_pass }}", bcrypt.gensalt(rounds=10)).decode())' | base64 -w0)
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
        {{ oc_bin }} patch secret -n kube-system kubeadmin --type json \
          -p '[{"op": "replace", "path": "/data/kubeadmin", "value": "'$PASS'"}]'
      when: kubeadmin_pass is defined
      register: kubepass
      until: kubepass is not failed
      retries: 30
      delay: 5

    - name: Apply mirroring yaml files
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
        {{ oc_bin }} apply -f {{ local_mirror }}/workspace/working-dir/cluster-resources/idms-oc-mirror.yaml
        {{ oc_bin }} apply -f {{ local_mirror }}/workspace/working-dir/cluster-resources/itms-oc-mirror.yaml
        {{ oc_bin }} apply -f {{ local_mirror }}/workspace/working-dir/cluster-resources/cs-community-operator-index-v{{ ocp_maj_min_version_dashed }}.yaml
        {{ oc_bin }} apply -f {{ local_mirror }}/workspace/working-dir/cluster-resources/cs-redhat-operator-index-v{{ ocp_maj_min_version_dashed }}.yaml
      when: enable_disconnected
      register: mirroring
      until: mirroring is not failed
      retries: 3
      delay: 5

    - name: Reset ca folder
      ansible.builtin.shell: |
        mkdir -p "{{ ca_folder }}"
        rm -f "{{ ca_folder }}/{{ item }}-ca-kube"
      with_items:
        - fullcluster

    - name: Does the firefox profile exist
      ansible.builtin.stat:
        path: "{{ firefox_profile }}"
      register: profile_path

    - name: Init firefox profile path
      ansible.builtin.shell: |
        mkdir -p "{{ firefox_profile }}"
      when: not profile_path.stat.exists

    # KUBECONFIG certificate-authority-data has the CA only for the API endpoint, we want all of them
    # /home/michele/Bin/yq '.clusters[0].cluster.certificate-authority-data' {{ item }}-kubeconfig | base64 -d > "{{ ca_folder }}/{{ item }}-ca-api"
    - name: Fetch all CAs for each cluster
      ansible.builtin.shell: |
        set -x -e -o pipefail
        export KUBECONFIG=/home/michele/{{ item }}-kubeconfig
        {{ oc_bin }} get -n default configmap/kube-root-ca.crt -o jsonpath="{.data.ca\.crt}" > "{{ ca_folder }}/{{ item }}-ca-kube"
      with_items:
        - fullcluster
      retries: 5
      delay: 10
      register: pki_import
      until: pki_import is not failed

    - name: Delete exiting CAs from SNOs
      ansible.builtin.shell: |
        set -e -o pipefail
        rm -f {{ ca_folder }}/{{ item }}-cert*pem
        awk 'BEGIN {c=0;} /BEGIN CERTIFICATE/ {c++} {print > "{{ item }}-cert" c ".pem"}' < {{ ca_folder }}/{{ item }}-ca-kube
        for i in {{ item }}-cert*; do
          certutil -D -n "{{ item }}-$i-kube" -d sql:"{{ firefox_profile }}" || true
        done
      args:
        chdir: "{{ ca_folder }}"
      with_items:
        - fullcluster
      retries: 5
      delay: 10
      register: pki_import
      until: pki_import is not failed

    - name: Import all CAs into my firefox profile
      ansible.builtin.shell: |
        set -e -o pipefail
        rm -f {{ ca_folder }}/cert*
        awk 'BEGIN {c=0;} /BEGIN CERTIFICATE/ {c++} {print > "{{ item }}-cert" c ".pem"}' < {{ ca_folder }}/{{ item }}-ca-kube
        for i in {{ item }}-cert*; do
          certutil -A -n "{{ item }}-$i-kube" -t "TC,C,C"  -i "$i" -d sql:"{{ firefox_profile }}"
        done
      args:
        chdir: "{{ ca_folder }}"
      with_items:
        - fullcluster
      retries: 10
      delay: 10
      register: pki_import
      until: pki_import is not failed

    # Seems this is mandatory (lesigh)
    - name: Disable default catalog sources
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
        {{ oc_bin }} patch OperatorHub cluster --type json -p '[{"op": "add", "path": "/spec/disableAllDefaultSources", "value": true}]'
      when: enable_disconnected
      register: catalog_sources
      until: catalog_sources is not failed
      retries: 50
      delay: 20

    # - name: Template out nfs bits
    #   tags:
    #     - nfs
    #   ansible.builtin.template:
    #     src: "../templates/{{ item }}"
    #     dest: "{{ fullclusterfolder }}/{{ item }}"
    #     mode: "0644"
    #   with_items:
    #     - nfs.yaml
    #
    # - name: Install nfs
    #   tags:
    #     - nfs
    #   ansible.builtin.shell: |
    #     set -e -o pipefail
    #     export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
    #     helm repo add csi-driver-nfs https://raw.githubusercontent.com/kubernetes-csi/csi-driver-nfs/master/charts || /bin/true
    #     helm install csi-driver-nfs csi-driver-nfs/csi-driver-nfs --namespace kube-system --version v4.9.0
    #     "{{ oc_bin }} apply -f "{{ fullclusterfolder }}/nfs.yaml"
    #   register: nfsstorage
    #   until: nfsstorage is not failed
    #   retries: 10
    #   delay: 20

    - name: Template out iscsi MCP for workers
      tags:
        - iscsi
      ansible.builtin.template:
        src: "../templates/mcp-workers-iscsi.yaml"
        dest: "{{ fullclusterfolder }}/mcp-workers-iscsi.yaml"
        mode: "0644"

    # - name: Template out nmstate bits for workers
    #   tags:
    #     - iscsi
    #   ansible.builtin.template:
    #     src: "../templates/{{ item }}"
    #     dest: "{{ fullclusterfolder }}/{{ item }}"
    #     mode: "0644"
    #   loop:
    #     - nmstate-subscription.yaml
    #     - nmstate-nmstate.yaml
    #     - nmstate-nics.yaml
    #
    # - name: Apply nmstate bits
    #   tags:
    #     - nmstate
    #   ansible.builtin.shell: |
    #     set -e -o pipefail
    #     export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
    #     {{ oc_bin }} apply -f "{{ fullclusterfolder }}/nmstate-subscription.yaml"
    #     {{ oc_bin }} apply -f "{{ fullclusterfolder }}/nmstate-nmstate.yaml"
    #   register: nmstate
    #   until: nmstate is not failed
    #   retries: 5
    #   delay: 20

    - name: Install local iscsi MCP
      tags:
        - iscsi
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
        {{ oc_bin }} apply -f "{{ fullclusterfolder }}/mcp-workers-iscsi.yaml"
        {{ oc_bin }} patch mcp worker --type merge --patch '{"spec": {"maxUnavailable": 3}}'
      register: mcg_iscsi
      until: mcg_iscsi is not failed
      retries: 5
      delay: 10

    - name: Wait for MCP to start
      tags:
        - iscsi
      ansible.builtin.pause:
        minutes: 1

    - name: Approve all machines again
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
        {{ oc_bin }} get csr -o {% raw %}go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}{% endraw %}' | xargs --no-run-if-empty {{ oc_bin }} adm certificate approve
        sleep 10
        {{ oc_bin }} get csr -o {% raw %}go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}{% endraw %}' | xargs --no-run-if-empty {{ oc_bin }} adm certificate approve
      register: csr
      until: csr is not failed
      retries: 5
      delay: 10

    - name: Set minio-s3 secret for image registry
      tags:
        - s3
      ansible.builtin.shell: |
        set -e
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig";
        {{ oc_bin }} create secret generic image-registry-private-configuration-user \
              --from-literal=REGISTRY_STORAGE_S3_ACCESSKEY="{{ minio.admin_access_key }}" \
              --from-literal=REGISTRY_STORAGE_S3_SECRETKEY="{{ minio.admin_secret_key }}" --namespace openshift-image-registry
      register: miniosetup
      until: miniosetup is not failed
      retries: 3
      delay: 5

    - name: Set minio-s3 backend for image registry
      tags:
        - s3
      ansible.builtin.shell: |
        set -e
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig";
        {{ oc_bin }} patch configs.imageregistry.operator.openshift.io cluster -n openshift-image-registry \
              --type merge --patch '{"spec": { "storage": { "s3": { "region": "notneeded", "regionEndpoint": "https://{{ minio.fqdn }}:{{ minio.port }}", "bucket": "{{ minio.bucket }}"}}}}'
        {{ oc_bin }} patch configs.imageregistry.operator.openshift.io cluster --type=json -p='[{"op": "add", "path": "/spec/managementState", "value": "Managed"}]'
      register: miniosetup
      until: miniosetup is not failed
      retries: 3
      delay: 5

    - name: Wait for MCP to settle
      tags:
        - iscsi
      ansible.builtin.shell: |
        set -ex
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
        if [ $({{ oc_bin }} get mcp/master -o jsonpath='{.status.readyMachineCount}') != $({{ oc_bin }} get mcp/master -o jsonpath='{.status.machineCount}') ]; then
          exit 1
        fi
        if [ $({{ oc_bin }} get mcp/worker -o jsonpath='{.status.readyMachineCount}') != $({{ oc_bin }} get mcp/worker -o jsonpath='{.status.machineCount}') ]; then
          exit 1
        fi
      retries: 30
      delay: 90
      register: mcp_ready
      until: mcp_ready is not failed

    - name: Wait for the cluster's stability
      ansible.builtin.shell: |
        set -e
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig";
        {{ oc_bin }} adm wait-for-stable-cluster --minimum-stable-period=5s

    - name: Approve all machines again
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
        {{ oc_bin }} get csr -o {% raw %}go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}{% endraw %}' | xargs --no-run-if-empty {{ oc_bin }} adm certificate approve
        sleep 10
        {{ oc_bin }} get csr -o {% raw %}go-template='{{range .items}}{{if not .status}}{{.metadata.name}}{{"\n"}}{{end}}{{end}}{% endraw %}' | xargs --no-run-if-empty {{ oc_bin }} adm certificate approve
      register: csr
      until: csr is not failed
      retries: 5
      delay: 10

    - name: Label workers as storage nodes
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
        oc label nodes -l node-role.kubernetes.io/worker "scale.spectrum.ibm.com/role=storage"

    - name: Patch MCP back to 1 maxunavail
      ansible.builtin.shell: |
        set -e -o pipefail
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
        {{ oc_bin }} patch mcp worker --type merge --patch '{"spec": {"maxUnavailable": 1}}'

    - name: Get multipath IDs
      delegate_to: worker-0
      ansible.builtin.shell: |
        multipathd show maps raw format %w
      register: multipath_ids_raw

    - name: Set multipath facts
      ansible.builtin.set_fact:
        multipath_ids: "{{ multipath_ids_raw.stdout_lines }}"

    - name: Template purple bits
      tags:
        - purple
      ansible.builtin.template:
        src: "../templates/{{ item }}"
        dest: "{{ fullclusterfolder }}/{{ item }}"
        mode: "0644"
      loop:
        - purple-catalog.yaml
        - purple-subscription.yaml
        - purple-object.yaml
        - purple-localdisk.yaml
        - purple-filesystem.yaml
        - purple-test.yaml
        - virt-subscription.yaml
        - virt-machine.yaml
        - virt-hyperconverged.yaml

    - name: Notify bandini
      ansible.builtin.shell: |
        curl -X POST http://raspyclock.int.rhx:8080/receive -d "Cluster Done! "
        curl -X POST http://raspyclock.int.rhx:8080/job -d "finished"
      failed_when: false

    - name: STOP HERE
      ansible.builtin.fail:
        msg: "STOP HERE FOR NOW"

    - name: Apply purple bits
      tags:
        - purple
      ansible.builtin.shell: |
        set -e
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig";
        {{ oc_bin }} apply -f "{{ fullclusterfolder }}/{{ item }}"
      register: purple_apply
      until: purple_apply is not failed
      retries: 30
      delay: 10
      loop:
        - purple-catalog.yaml
        - purple-subscription.yaml
        - purple-object.yaml

    - name: Wait for MCP to start
      tags:
        - purple
      ansible.builtin.pause:
        minutes: 3

    - name: Wait for MCP to settle
      tags:
        - purple
      ansible.builtin.shell: |
        set -ex
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
        if [ $({{ oc_bin }} get mcp/master -o jsonpath='{.status.readyMachineCount}') != $({{ oc_bin }} get mcp/master -o jsonpath='{.status.machineCount}') ]; then
          exit 1
        fi
        if [ $({{ oc_bin }} get mcp/worker -o jsonpath='{.status.readyMachineCount}') != $({{ oc_bin }} get mcp/worker -o jsonpath='{.status.machineCount}') ]; then
          exit 1
        fi
      retries: 30
      delay: 90
      register: mcp_ready
      until: mcp_ready is not failed

    - name: Apply purple bits (2)
      tags:
        - purple
      ansible.builtin.shell: |
        set -e
        export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
        {{ oc_bin }} apply -f "{{ fullclusterfolder }}/{{ item }}"
      register: purple_apply
      until: purple_apply is not failed
      retries: 20
      delay: 10
      loop:
        - purple-localdisk.yaml
        - purple-filesystem.yaml
        - purple-test.yaml
        - virt-subscription.yaml

    # - name: Install purple operator
    #   tags:
    #     - purple
    #   ansible.builtin.shell: |
    #     set -e -o pipefail
    #     export KUBECONFIG="{{ fullclusterfolder }}/auth/kubeconfig"
    #     {{ oc_bin }} apply -f "{{ fullclusterfolder }}/{{ item }"
    #   loop:
    #     - purple-catalog.yaml
    #     - purple-subscription.yaml
