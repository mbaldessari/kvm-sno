---
- name: Remove folders
  ansible.builtin.file:
    path: "{{ tempfolder }}/{{ item }}"
    state: absent
  with_items: "{{ inventory_hostname_short }}"

- name: Create folders
  ansible.builtin.file:
    path: "{{ tempfolder }}/{{ item }}"
    state: directory
    recurse: true
  with_items: "{{ inventory_hostname_short }}"

# This is okay as we only want to see the template
- name: Template one install-config.yaml for reference
  ansible.builtin.template:
    src: ./templates/install-config.yaml.j2
    dest: "{{ tempfolder }}/install-config.yaml"
    mode: "0640"
  with_items: "{{ snos | first }}"

- name: Template install-config.yaml
  ansible.builtin.template:
    src: ./templates/install-config.yaml.j2
    dest: "{{ tempfolder }}/{{ item }}/install-config.yaml"
    mode: "0640"
  with_items: "{{ inventory_hostname_short }}"

- name: Create ocp manifests
  ansible.builtin.shell: |
    set -e
    {{ mirrorfolder }}/{{ ocp_version }}/openshift-install --dir={{ item }} create manifests
  args:
    chdir: "{{ tempfolder }}"
  with_items: "{{ inventory_hostname_short }}"

# Not working yet?!
- name: Template machineconfig for kernel args
  ansible.builtin.template:
    src: ./templates/machineconfig-kargs.yaml
    dest: "{{ tempfolder }}/{{ item }}/openshift/99-openshift-machineconfig-kargs.yaml"
    mode: "0644"
  with_items: "{{ inventory_hostname_short }}"

# This is because single-node-ignition-config removes the manifests
- name: Copy manifests in another folder for debuggability
  ansible.builtin.shell: |
    set -e
    mkdir -p .backupfiles
    cp -avf * .backupfiles/
  args:
    chdir: "{{ tempfolder }}/{{ item }}"
  with_items: "{{ inventory_hostname_short }}"

- name: Create ocp folder and run openshift-install
  ansible.builtin.shell: |
    set -e
    {{ mirrorfolder }}/{{ ocp_version }}/openshift-install --dir={{ item }} create single-node-ignition-config
  args:
    chdir: "{{ tempfolder }}"
  with_items: "{{ inventory_hostname_short }}"

# - name: Inject kernel args
#   ansible.builtin.shell: |
#     set -e -o pipefail
#     jq '. += {"kernelArguments": { "shouldExist": ["mitigations=off", "selinux=0"] }}' \
#         "{{ tempfolder }}/{{ item }}/bootstrap-in-place-for-live-iso.ign" | \
#         jq '.ignition.version="3.3.0"' > "{{ tempfolder }}/tmp-{{ item }}.ign"
#     cp -f "{{ tempfolder }}/tmp-{{ item }}.ign" "{{ tempfolder }}/{{ item }}/bootstrap-in-place-for-live-iso.ign"
#   with_items: "{{ inventory_hostname_short }}"

- name: Run coreos ignition embedding
  ansible.builtin.shell: |
    set -e
    cp {{ mirrorfolder }}/{{ ocp_version }}/rhcos-live.iso "{{ tempfolder }}/{{ item }}/rhcos-live.iso"
    podman run --privileged --pull always --rm \
        -v /dev:/dev -v /run/udev:/run/udev -v "{{ tempfolder }}/{{ item }}:/data" \
        -w /data quay.io/coreos/coreos-installer:release \
        iso ignition embed -fi bootstrap-in-place-for-live-iso.ign "rhcos-live.iso"
  args:
    chdir: "{{ tempfolder }}"
  with_items: "{{ inventory_hostname_short }}"

- name: Create SNO VM
  ansible.builtin.command: >-
    virt-install
    --name {{ item }}
    --cpu host-passthrough
    --hvm
    --virt-type kvm
    --cdrom {{ tempfolder }}/{{ item }}/rhcos-live.iso
    --arch {{ arch }}
    --os-variant rhel8.0
    --network bridge="{{ bridge_interface }}",model=virtio,mac="{{ mac_prefix }}:{{ clusters[item].mac_nr }}"
    --vcpus {{ clusters[item].cpus }}
    --ram {{ clusters[item].ram }}
    --disk pool={{ vm_pool }},size={{ clusters[item].disk }},format=qcow2,bus=scsi,cache={{ clusters[item].cache }},wwn={{ clusters[item].wwn }}
    --disk pool={{ vm_pool }},size={{ clusters[item].disk2 }},format=qcow2,bus=scsi,cache={{ clusters[item].cache2 }},wwn={{ clusters[item].wwn2 }}
    --check disk_size=off
    --graphics spice,listen=127.0.0.1
    --noautoconsole
    --boot menu=on,useserial=on,uefi
  with_items: "{{ inventory_hostname_short }}"
  # We serialize this because the *virt stack seems to get fragile when things are run concurrently
  throttle: 1
  retries: 10
  delay: 10
  register: vm_creation
  until: vm_creation is not failed

- name: Wait for vm to be stopped
  ansible.builtin.shell: |
    set -e -o pipefail
    virsh list --all | grep -w "{{ item }}" | grep -v running
  register: running
  retries: 100
  delay: 10
  until: running is not failed
  with_items: "{{ inventory_hostname_short }}"

- name: Start "{{ item }}"
  ansible.builtin.command: |
    virsh start "{{ item }}"
  with_items: "{{ inventory_hostname_short }}"

- name: Wait for node to be Ready
  ansible.builtin.shell: |
    set -e -o pipefail
    export KUBECONFIG="{{ tempfolder }}/{{ item }}/auth/kubeconfig"
    "{{ mirrorfolder }}/{{ ocp_version }}"/oc get nodes | grep "{{ item }}" | grep -v NotReady
  with_items: "{{ inventory_hostname_short }}"
  register: cluster_info
  until: cluster_info is not failed
  retries: 100
  delay: 20

- name: Template out lvm bits
  tags:
    - lvm
  ansible.builtin.template:
    src: ./templates/lvm-base.yaml
    dest: "{{ tempfolder }}/{{ item }}/lvm-base.yaml"
    mode: "0644"
  with_items: "{{ inventory_hostname_short }}"

- name: Template out lvm cluster
  tags:
    - lvm
  ansible.builtin.template:
    src: ./templates/lvm-cluster.yaml
    dest: "{{ tempfolder }}/{{ item }}"
    mode: "0644"
  with_items: "{{ inventory_hostname_short }}"

- name: Fetch kubeconfig file
  ansible.posix.synchronize:
    mode: pull
    src: "{{ tempfolder }}/{{ item }}/auth/kubeconfig"
    dest: "~/{{ item }}-kubeconfig"
  with_items: "{{ inventory_hostname_short }}"

- name: Fix permissions
  ansible.builtin.shell: |
    chmod 0600 "/home/michele/{{ item }}-kubeconfig"
  with_items: "{{ inventory_hostname_short }}"
  delegate_to: localhost

- name: Wait for bootstrap to complete
  ansible.builtin.shell: |
    set -e -o pipefail
    export KUBECONFIG="{{ tempfolder }}/{{ item }}/auth/kubeconfig"
    "{{ mirrorfolder }}/{{ ocp_version }}"/openshift-install --dir={{ item }} wait-for bootstrap-complete &> /tmp/bootstrap-{{ item }}.log
  args:
    chdir: "{{ tempfolder }}"
  with_items: "{{ inventory_hostname_short }}"
  register: cluster_info
  until: cluster_info is not failed
  retries: 100
  delay: 20

- name: Wait for console to be up
  ansible.builtin.uri:
    url: https://console-openshift-console.apps.{{ item }}.{{ domain }}/
    validate_certs: false
    follow_redirects: all
  with_items: "{{ inventory_hostname_short }}"
  register: uri
  until: uri is not failed
  retries: 150
  delay: 30
- name: Remove isos from /ramfs to free up ramfs
  ansible.builtin.shell: |
    set -e -o pipefail
    rm -f "{{ tempfolder }}/{{ item }}/rhcos-live.iso"
  with_items: "{{ inventory_hostname_short }}"

- name: Set kubeadmin password
  ansible.builtin.shell: |
    set -e -o pipefail
    PASS=$(python3 -c 'import bcrypt; print(bcrypt.hashpw(b"{{ kubeadmin_pass }}", bcrypt.gensalt(rounds=10)).decode())' | base64 -w0)
    export KUBECONFIG="{{ tempfolder }}/{{ item }}/auth/kubeconfig"
    "{{ mirrorfolder }}/{{ ocp_version }}"/oc patch secret -n kube-system kubeadmin --type json \
      -p '[{"op": "replace", "path": "/data/kubeadmin", "value": "'$PASS'"}]'
  with_items: "{{ inventory_hostname_short }}"
  when: kubeadmin_pass is defined
  register: kubepass
  until: kubepass is not failed
  retries: 30
  delay: 5

# We do something productive while we wait for the LVM bits to install
- name: Set up PKI steps
  ansible.builtin.import_tasks: pki-setup.yml
  delegate_to: localhost
  become: false
  failed_when: false
  tags:
    - pki

- name: Apply mirroring yaml files
  ansible.builtin.shell: |
    set -e -o pipefail
    export KUBECONFIG="{{ tempfolder }}/{{ item }}/auth/kubeconfig"
    "{{ mirrorfolder }}/{{ ocp_version }}"/oc apply -f "{{ local_mirror }}/workspace/working-dir/cluster-resources/*oc-mirror.yaml"
    "{{ mirrorfolder }}/{{ ocp_version }}"/oc apply -f "{{ local_mirror }}/workspace/working-dir/cluster-resources/cs-*index*v{{ ocp_maj_min_version_dashed }}.yaml"
  with_items: "{{ inventory_hostname_short }}"
  when: enable_disconnected
  register: mirroring
  until: mirroring is not failed
  retries: 50
  delay: 30

- name: Disable default catalog sources
  ansible.builtin.shell: |
    set -e -o pipefail
    export KUBECONFIG="{{ tempfolder }}/{{ item }}/auth/kubeconfig"
    "{{ mirrorfolder }}/{{ ocp_version }}"/oc patch OperatorHub cluster --type json -p '[{"op": "add", "path": "/spec/disableAllDefaultSources", "value": true}]'
  with_items: "{{ inventory_hostname_short }}"
  register: lvm
  until: lvm is not failed
  retries: 50
  delay: 20

- name: Install LVM operator
  tags:
    - lvm
  ansible.builtin.shell: |
    set -e -o pipefail
    export KUBECONFIG="{{ tempfolder }}/{{ item }}/auth/kubeconfig"
    "{{ mirrorfolder }}/{{ ocp_version }}"/oc apply -f "{{ tempfolder }}/{{ item }}/lvm-base.yaml"
  with_items: "{{ inventory_hostname_short }}"
  register: lvm
  until: lvm is not failed
  retries: 50
  delay: 20
- name: Install LVM Cluster
  tags:
    - lvm
  ansible.builtin.shell: |
    set -e -o pipefail
    export KUBECONFIG="{{ tempfolder }}/{{ item }}/auth/kubeconfig"
    "{{ mirrorfolder }}/{{ ocp_version }}"/oc apply -f "{{ tempfolder }}/{{ item }}/lvm-cluster.yaml"
  register: lvmcluster
  retries: 50
  delay: 30
  until: lvmcluster is not failed
  with_items: "{{ inventory_hostname_short }}"
